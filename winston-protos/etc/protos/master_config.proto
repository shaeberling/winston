/*
 * Copyright 2016 Sascha Haeberling
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*********************************************/
/* Structures to configure a winston system. */
/*********************************************/

syntax = "proto3";

package com.s13g.winston.proto;

option java_package = "com.s13g.winston.proto";
option java_outer_classname = "Master";

message MasterConfig {
  /* The port on which the master daemon should listen for connections. */
  int32 daemonPort = 1;
  /* Path to the certificate keystore for serving SSL connections. */
  string sslKeystorePath = 2;
  /* Password for the keystore used to serve SSL connections. */
  string sslKeystorePassword = 3;
  /* A list of active modules. */
  repeated Module module = 4;
  /* All known winston nodes, not all might be active at a given time. */
  /** TODO: Remove this from here. We will have a Winston module for this. */
  repeated KnownNode known_client = 5;
}

/* A module that runs on the master. E.g. a Nest or TV controller. */
message Module {
  /* The type of the module, such as "nest". */
  string type = 1;
  /* A number of parameters required to configure the module. */
  repeated Channel channel = 2;
}

/* A known client/node. */
message KnownNode {
  /* MAC address uniquly addresses a client. */
  string mac_address = 1;
  /* Human-readable unique alias for the node, e.g. 'pi-power-1'. */
  string name = 2;
  /* The port to access the node daemon, typically 1984. */
  int32 port = 3;
  /* Whether the node daemon should accessed through https. */
  bool use_ssl = 4;
  /* The config to send to the client, which defines its active plugins. */
  string config_file = 5;
}

/* Each module can have support for multiple channels. */
message Channel {
  /* The type of the channel. */
  string type = 1;
  /* An optional address to localize the channel. */
  string address = 2;
  /* All parameters required to run the channel. */
  repeated Parameter parameter = 3;
}

/* Parameters that can be passed to modules. */
message Parameter {
  /* Name of the parameter. */
  string name = 1;
  /* Value of the parameter. */
  string value = 2;
}