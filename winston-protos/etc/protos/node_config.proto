/*
 * Copyright 2015 Sascha Haeberling
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package com.s13g.winston.proto;

option java_package = "com.s13g.winston.proto";
option java_outer_classname = "Node";

/*
 * Holds configurations for a node.
 * Needs to be made available to the client at start-up.
 */
message NodeConfig {
  /* The port to start the node daemon on. */
  int32 daemon_port = 1;

  /*
   * GPIO plugins to be activated on this node.
   * Note that the order matters if a plugin requires other plugins as their
   * dependency. Dependencies have to be available a this point.
   * Also we assume only one plugin of each type can be present.
   */
  repeated GpioPlugin gpio_plugin = 2;

  /* 1-Wire plugins to be activated on this node.*/
  repeated OneWirePlugin onewire_plugin = 3;

  /** I2C plugins to be activated on this node. */
  repeated I2cPlugin i2c_plugin = 4;

  /* Defines a 1-Wire plugin that should be active on this node. */
  message OneWirePlugin {
    /* The type defines which plugin to load. */
    string type = 1;
    /* The name of the 1-Wire node, e.g. "28-000005abf27d". */
    string name = 2;
  }

  /* Defines a GPIO plugin that should be active on this node. */
  message GpioPlugin {
    /* The type defines which plugin to load. */
    string type = 1;
    /* Mapping from e.g. GPIO pins. */
    repeated int32 mapping = 2;
  }

  /** An I2C based plugin that is active on this node.*/
  message I2cPlugin {
    /* The type defines which plugin to load. */
    string type = 1;
    /** The I2C bus of the device. Typically "1". */
    int32 bus = 2;
    /* The address of the I2C device, e.g. "64" for "0x40". */
    int32 address = 3;
  }
}